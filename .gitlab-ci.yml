# Android CI/CD GitLab Template with corrections

image: eclipse-temurin:17-jdk-jammy

variables:
  ANDROID_COMPILE_SDK: "33"
  ANDROID_BUILD_TOOLS: "33.0.2"
  ANDROID_SDK_TOOLS: "9477386"
  ANDROID_HOME: "${PWD}/android-sdk-root"
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"
  JAVA_HOME: "/usr/lib/jvm/java-17-openjdk-amd64"
  PATH: "$JAVA_HOME/bin:$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/cmdline-tools/tools/bin:$ANDROID_HOME/platform-tools"

before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget unzip curl docker.io
  - mkdir -p $ANDROID_HOME
  - wget --no-verbose --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  - unzip -q -d "$ANDROID_HOME/cmdline-tools" "$ANDROID_HOME/cmdline-tools.zip"
  - mv -T "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/tools"
  - yes | sdkmanager --licenses > /dev/null || true
  - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager "platform-tools"
  - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"
  - chmod +x ./gradlew

stages:
  - build
  - test
  - build-sonar
  - lint
  - dependency_check
  - deploy_debug
  - deploy_release
  - report

# Lint Debug
lintDebug:
  stage: lint
  interruptible: true
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug
  artifacts:
    paths:
      - app/build/reports/lint-results-debug.html
    expose_as: "lint-report"
    when: always

# Assemble Debug APK
assembleDebug:
  stage: build
  interruptible: true
  script:
    - ./gradlew assembleDebug
  artifacts:
    paths:
      - app/build/outputs/

# Assemble Release APK
assembleRelease:
  stage: build
  script:
    - if [ -n "$KEYSTORE_FILE" ]; then echo $KEYSTORE_FILE | base64 -d > my-release-key.keystore; fi
    - ./gradlew clean assembleRelease --stacktrace --info
  artifacts:
    paths:
      - app/build/outputs/apk/release/

# Run Unit Tests
debugTests:
  stage: test
  needs: [lintDebug, assembleDebug]
  script:
    - ./gradlew -Pci --console=plain :app:testDebug
  artifacts:
    paths:
      - app/build/test-results/
      - app/build/reports/tests/
    when: always

# SonarQube Analysis
build-sonar:
  stage: build-sonar
  script:
    - ./gradlew lintDebug
    - ./gradlew sonar \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.androidLint.reportPaths=app/build/reports/lint-results-debug.xml
  allow_failure: true

# Dependency Check (SAST)
sast_check:
  stage: dependency_check
  image: owasp/dependency-check:latest
  script:
    - dependency-check.sh --project MyApp --scan ./app --format "HTML" --out reports/dependency-check
  artifacts:
    paths:
      - reports/dependency-check/
    expire_in: 1 week
  allow_failure: true

# Deploy Debug Docker
docker_build:
  stage: deploy_debug
  image: docker:24.0.2
  services:
    - docker:dind
  dependencies:
    - assembleRelease
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - cp app/build/outputs/apk/release/app-release.apk .
    - docker build -t registry.gitlab.com/$CI_PROJECT_PATH/app-debug:$CI_COMMIT_SHORT_SHA .
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/app-debug:$CI_COMMIT_SHORT_SHA
  rules:
    - when: always

# Deploy Release Docker
deploy_release:
  stage: deploy_release
  image: docker:24.0.2
  services:
    - docker:dind
  dependencies:
    - assembleRelease
  script:
    - cp app/build/outputs/apk/release/app-release.apk .
    - docker build -t myapp:release .
    - docker run -d --name myapp_release myapp:release
  rules:
    - when: always

# Final Report
report:
  stage: report
  script:
    - echo "Pipeline finished. Collecting reports..."
    - ls -R app/build/reports || true
  rules:
    - when: always
