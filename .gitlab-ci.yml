stages:
  - build
  - test
  - build-sonar
  - lint
  - dependency_check
  - deploy_debug
  - deploy_release
  - report

variables:
  ANDROID_COMPILE_SDK: "33"
  ANDROID_BUILD_TOOLS: "33.0.2"
  ANDROID_SDK_ROOT: "$CI_PROJECT_DIR/android-sdk"
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"
  JAVA_HOME: "/usr/lib/jvm/java-17-openjdk-amd64"  # Important pour sdkmanager

default:
  image: gradle:8.10.0-jdk17-jammy
  before_script:
    - apt-get update && apt-get install -y wget unzip curl docker.io
    - mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
    - wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdtools.zip
    - unzip cmdtools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
    - mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest
    - rm cmdtools.zip
    - export PATH="$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
    - export JAVA_HOME=$(/usr/libexec/java_home -v 17 2>/dev/null || echo /usr/local/openjdk-17)
    - yes | sdkmanager --licenses || true
    - sdkmanager "platform-tools" "platforms;android-$ANDROID_COMPILE_SDK" "build-tools;$ANDROID_BUILD_TOOLS"
    - chmod +x ./gradlew


# Build Release APK
build:
  stage: build
  script:
    - echo $KEYSTORE_FILE | base64 -d > my-release-key.keystore
    - ./gradlew assembleRelease
  artifacts:
    paths:
      # Vérifie si ton Gradle génère un unsigned ou signed APK
      - app/build/outputs/apk/release/app-release-unsigned.apk
    expire_in: 1 hour

# Unit Tests
unit_test:
  stage: test
  needs: [build]
  script:
    - ./gradlew testDebugUnitTest --stacktrace --info
  artifacts:
    paths:
      - app/build/test-results/
      - app/build/reports/tests/
    when: always

# SonarQube Analysis
build-sonar:
  stage: build-sonar
  cache:
    policy: pull-push
    key: "sonar-cache-$CI_COMMIT_REF_SLUG"
    paths:
      - "${SONAR_USER_HOME}/cache"
  script:
    - ./gradlew lintDebug
    - ./gradlew sonar \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.androidLint.reportPaths=app/build/reports/lint-results-debug.xml
  allow_failure: true

# Lint
lint_check:
  stage: lint
  needs: [build]
  script:
    - ./gradlew lint
  artifacts:
    paths:
      - app/build/reports/lint-results.html
    expire_in: 1 week

# Dependency Check (SAST)
sast_check:
  stage: dependency_check
  image: owasp/dependency-check:latest
  script:
    - dependency-check.sh --project MyApp --scan ./app --format "HTML" --out reports/dependency-check
  artifacts:
    paths:
      - reports/dependency-check/
    expire_in: 1 week
  allow_failure: true

# Deploy Debug in Docker
docker_build:
  stage: deploy_debug
  image: docker:24.0.5
  services:
    - docker:dind
  needs: [build]
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build -f docker/Dockerfile -t registry.gitlab.com/$CI_PROJECT_PATH/app-debug:$CI_COMMIT_SHORT_SHA .
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/app-debug:$CI_COMMIT_SHORT_SHA
  rules:
    - when: always

# Deploy Release in Docker
deploy_release:
  stage: deploy_release
  image: docker:24.0.5
  services:
    - docker:dind
  needs: [build]
  script:
    - docker build -f docker/Dockerfile -t mon-apk:latest .
    - docker run -d --name myapp_release mon-apk:latest
  rules:
    - when: always

# Final Report
report:
  stage: report
  script:
    - echo "Pipeline finished. Collecting reports..."
    - ls -R app/build/reports || true
  rules:
    - when: always
